#!/usr/bin/env bash

user="root"
pass="SOME_PASSWORD"


run_pxe_boot=0
while [[ "$1" == "-"* ]]; do
  if [[ "$1" == "-p" || "$1" == "--pxe-boot" ]]; then
    run_pxe_boot=1
    shift 1
  fi
done


if [[ "$1" != "" ]]; then
  if [[ "$1" == "1" ]]; then
    idrac="SOME_ADDRESS_1"
  elif [[ "$1" == "2" ]]; then
    idrac="SOME_ADDRESS_2"
  elif [[ "$1" == "3" ]]; then
    idrac="SOME_ADDRESS_3"
  else
    echo "arg must be {1, 2, 3}"
    exit 1
  fi
else
  echo "requires an arg {1, 2, 3}"
  exit 1
fi



main() {
  if [[ $run_pxe_boot -eq 1 ]]; then
    pxeBoot
  else
    echo "$(getInfo | jq --color-output)"
  fi
}



pxeBoot() {
  pxe_boot_status_code=$(setSystemToPxeBoot)  
  if [[ $pxe_boot_status_code -eq 0 ]]; then
    echo "Successfully set the system to pxe boot."
  else
    echo "Failed to set the system to pxe boot."
    exit 1
  fi

  sleep 3

  reboot_status_code=$(rebootSystem)
  if [[ $reboot_status_code -eq 0 ]]; then  
    echo "Successfully rebooted the system."
  else
    echo "Failed to reboot the system."
    exit 1
  fi
}



setSystemToPxeBoot() {
  pxe_boot="$(curl -s -k -u $user:$pass -X PATCH -H "Content-Type: application/json" \
    -d '{"Boot": {"BootSourceOverrideEnabled": "Once", "BootSourceOverrideTarget": "Pxe"}}' \
    https://$idrac/redfish/v1/Systems/System.Embedded.1)"

  echo $?
}



rebootSystem() {
  reboot="$(curl -s -k -u $user:$pass -X POST -H "Content-Type: application/json" \
    -d '{"ResetType": "PowerCycle"}' \
    https://$idrac/redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset)"
  
  echo $?
}



forceOff() {
  force_off="$(curl -s -k -u "$user:$pass" -X POST \
    -H "Content-Type: application/json" \
    -d '{"ResetType": "ForceOff"}' \
    https://$idrac/redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset)"

  echo $?
}



forceOn() {
  force_on="$(curl -s -k -u "$user:$pass" -X POST \
    -H "Content-Type: application/json" \
    -d '{"ResetType": "On"}' \
    https://$idrac/redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset)" 2>/dev/null

  echo $?
}



getPowerState() { 
  power_state="$(getInfo \
    | jq '.PowerState')"

  echo $power_state
}



getInfo() { 
  info="$(curl -s -k -u "$user:$pass" \
    https://$idrac/redfish/v1/Systems/System.Embedded.1 \
    | jq)"

  echo $info
}



main

